(ns sharpie.trapperkeeper.tracing.ring-test
  (:require
    [clojure.test :refer :all]
    [ring.mock.request :as ring-mock]
    [sharpie.trapperkeeper.tracing :as tracing]
    [sharpie.trapperkeeper.tracing.ring :as tracing-ring])
  (:import
    (io.opentracing.mock MockSpan$MockContext MockTracer)
    (io.opentracing.tag Tags)))

(def mock-tracer (new MockTracer))


(deftest tracing-ring-test
  (let [handler (fn [request] {:status 200
                               :headers {"Content-Type" "text/plain"}
                               :body "Hello, world!"})
        wrapped-handler (tracing-ring/wrap-with-tracing handler mock-tracer)]

    (testing "Executing the handler returns the reponse generated by the wrapped handler."
      (let [request (ring-mock/request :get "/testing")
            response (wrapped-handler request)
            _ (.reset mock-tracer)]
        (is (= "Hello, world!" (:body response)))))

    (testing "Executing the handler on a request with trace headers generates a span."
      (let [request (-> (ring-mock/request :get "https://somewhere.test/testing")
                        ;; NOTE: These header names are specific to the
                        ;;       MockTracer. Different tracers will respond
                        ;;       to different header names.
                        ;;
                        ;;       Hopefully the W3C will save us one day by
                        ;;       publishing the TraceContext specification.
                        (ring-mock/header "traceid" "9000")
                        (ring-mock/header "spanid" "42"))
            response (wrapped-handler request)
            span (-> mock-tracer .finishedSpans first)
            tags (.tags span)
            _ (.reset mock-tracer)]

        (is (= "GET" (.operationName span)))
        (is (= 9000 (-> span .context .traceId)))
        (is (= 42 (.parentId span)))

        (is (= Tags/SPAN_KIND_SERVER (get tags (.getKey Tags/SPAN_KIND))))
        (is (= "https://somewhere.test/testing" (get tags (.getKey Tags/HTTP_URL))))
        (is (= "GET" (get tags (.getKey Tags/HTTP_METHOD))))))))
